{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wailb\\\\OneDrive\\\\Documents\\\\GitHub\\\\Blockchain-Polls\\\\blockchainpollsFrontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport Head from './components/head/Head';\nimport Content from './components/content/Content';\nimport './css/bootstrap.min.css';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const API_URL = 'http://localhost:3500/polls';\n  const [fetchErr, setFetchErr] = useState(null);\n  const [polls, setPolls] = useState([]);\n  const [newPoll, setNewPoll] = useState({\n    id: 0,\n    question: '',\n    image: '',\n    results: [0, 0, 0],\n    options: ['', '', '']\n  });\n\n  /** ###########   Chart state ############## */\n\n  const [chartCon, setChartCon] = useState({\n    series: [{\n      data: []\n    }],\n    options: {\n      chart: {\n        height: 350,\n        type: 'bar',\n        events: {\n          click: function (chart, w, e) {\n            // console.log(chart, w, e)\n          }\n        }\n      },\n      plotOptions: {\n        bar: {\n          columnWidth: '45%',\n          distributed: true\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      legend: {\n        show: false\n      },\n      xaxis: {\n        categories: [],\n        labels: {\n          style: {\n            fontSize: '12px'\n          }\n        }\n      }\n    }\n  });\n\n  /** ###########   Chart state ############## */\n\n  /** ###########   Polls state ############## */\n\n  /** ###########   Polls state ############## */\n\n  useEffect(() => {\n    const fetchpolls = async () => {\n      try {\n        const response = await fetch(API_URL);\n        if (!response.ok) throw Error('Did not recieve the data ');\n        const listPolls = await response.json();\n        setPolls(listPolls);\n        console.log(listPolls);\n        setFetchErr(null);\n      } catch (err) {\n        setFetchErr(err.message);\n      }\n    };\n    setTimeout(() => {\n      fetchpolls();\n    }, 1000);\n  }, []);\n\n  /** ###########   new state ############## */\n\n  /** ###########   new state ############## */\n\n  const addPoll = poll => {\n    const id = polls.length ? polls[polls.length - 1].id + 1 : 1;\n    const myNewPoll = {\n      id,\n      question: poll.question,\n      image: poll.image,\n      results: poll.results,\n      options: poll.options,\n      voted: false\n    };\n    const listPolls = [...polls, myNewPoll];\n    setPolls(listPolls);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!newPoll) return;\n    addPoll(newPoll);\n    setNewPoll(newPoll => ({\n      ...newPoll,\n      id: 0,\n      question: '',\n      image: '',\n      results: [0, 0, 0],\n      options: ['', '', ''],\n      voted: false\n    }));\n  };\n\n  /** ###########   poll Selected state ############## */\n\n  const [pollSelected, setPollSelected] = useState();\n\n  /** ###########   poll Selected state ############## */\n\n  const handleSelectPoll = id => {\n    const poll = polls.find(poll => poll.id === id);\n    const selected = {\n      id: poll.id,\n      question: poll.question,\n      image: poll.image,\n      results: poll.results,\n      options: poll.options,\n      voted: poll.voted\n    };\n    const newChart = {\n      series: [{\n        data: selected.results\n      }],\n      options: {\n        chart: {\n          height: 350,\n          type: 'bar',\n          events: {\n            click: function (chart, w, e) {\n              // console.log(chart, w, e)\n            }\n          }\n        },\n        plotOptions: {\n          bar: {\n            columnWidth: '45%',\n            distributed: true\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        legend: {\n          show: false\n        },\n        xaxis: {\n          categories: selected.options,\n          labels: {\n            style: {\n              fontSize: '12px'\n            }\n          }\n        }\n      }\n    };\n    setPollSelected(selected);\n    setChartCon(newChart);\n  };\n  const handleVote = e => {\n    e.preventDefault();\n    [].forEach.call(e.target.elements, function (ele) {\n      if (ele.checked) {\n        const index = polls.findIndex(poll => {\n          return poll.id === pollSelected.id;\n        });\n        polls[index].results[ele.value] += 1;\n        polls[index].voted = true;\n        pollSelected.voted = true;\n        setPollSelected(pollSelected);\n        setPolls(polls);\n        localStorage.setItem('pollsList', JSON.stringify(polls));\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      newPoll: newPoll,\n      setNewPoll: setNewPoll,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      polls: polls,\n      setPolls: setPolls,\n      handleSelectPoll: handleSelectPoll,\n      pollSelected: pollSelected,\n      handleVote: handleVote,\n      chartCon: chartCon,\n      setChartCon: setChartCon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"fbaofMsHgLzBcGPfCKeXbIm4wvE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Head","Content","useState","useEffect","App","API_URL","fetchErr","setFetchErr","polls","setPolls","newPoll","setNewPoll","id","question","image","results","options","chartCon","setChartCon","series","data","chart","height","type","events","click","w","e","plotOptions","bar","columnWidth","distributed","dataLabels","enabled","legend","show","xaxis","categories","labels","style","fontSize","fetchpolls","response","fetch","ok","Error","listPolls","json","console","log","err","message","setTimeout","addPoll","poll","length","myNewPoll","voted","handleSubmit","preventDefault","pollSelected","setPollSelected","handleSelectPoll","find","selected","newChart","handleVote","forEach","call","target","elements","ele","checked","index","findIndex","value","localStorage","setItem","JSON","stringify"],"sources":["C:/Users/wailb/OneDrive/Documents/GitHub/Blockchain-Polls/blockchainpollsFrontend/src/App.js"],"sourcesContent":["import './App.css';\nimport Head from './components/head/Head';\nimport Content from './components/content/Content';\nimport './css/bootstrap.min.css'\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n\n\n\n\n\n  const API_URL = 'http://localhost:3500/polls';\n  const [fetchErr, setFetchErr] = useState(null);\n\n  const [polls, setPolls] = useState([]);\n\n\n  const [newPoll, setNewPoll] = useState({\n    id: 0,\n    question : '',\n    image : '',\n    results : [0,0,0],\n    options : ['','','']\n  });\n\n\n\n\n  /** ###########   Chart state ############## */\n\n  const [chartCon, setChartCon] = useState(\n    {\n      series: [{\n          data: []\n        }],\n        options: {\n          chart: {\n            height: 350,\n            type: 'bar',\n            events: {\n              click: function(chart, w, e) {\n                // console.log(chart, w, e)\n              }\n            }\n          },\n          plotOptions: {\n            bar: {\n              columnWidth: '45%',\n              distributed: true,\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          legend: {\n            show: false\n          },\n          xaxis: {\n            categories: [],\n            labels: {\n              style: {\n                fontSize: '12px'\n              }\n            }\n          }\n        },\n  }\n\n  )\n\n    /** ###########   Chart state ############## */\n\n\n     /** ###########   Polls state ############## */\n\n   /** ###########   Polls state ############## */\n\n    useEffect(() => {\n\n      const fetchpolls = async () => {\n        try{\n            const response = await fetch(API_URL);\n            if(!response.ok) throw Error('Did not recieve the data ');\n            const listPolls = await response.json();\n            setPolls(listPolls);\n            console.log(listPolls);\n            setFetchErr(null)\n        }catch(err){\n          setFetchErr(err.message)\n        }\n\n      }\n\n      setTimeout(() => {\n        fetchpolls();\n      }, 1000)\n\n      \n    }, [])\n\n     /** ###########   new state ############## */\n\n\n  \n     /** ###########   new state ############## */\n\n\n  const addPoll = (poll) => {\n\n    const id = polls.length ? polls[polls.length - 1].id + 1 : 1;\n    const myNewPoll = {id, question: poll.question, image: poll.image, results: poll.results, options: poll.options, voted: false};\n\n    const listPolls = [...polls, myNewPoll];\n    setPolls(listPolls);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(!newPoll) return;\n    addPoll(newPoll);\n    setNewPoll(newPoll => ({\n                      ...newPoll,\n                      id: 0,\n                    question : '',\n                    image : '',\n                    results : [0,0,0],\n                    options : ['','',''],\n                    voted : false  \n                    }));\n  }\n\n     /** ###########   poll Selected state ############## */\n\n\n  const [pollSelected, setPollSelected] = useState()\n\n    /** ###########   poll Selected state ############## */\n\n\n  const handleSelectPoll = (id) => {\n\n    const poll = polls.find(poll => poll.id === id);\n    const selected = {id: poll.id, question: poll.question, image: poll.image, results: poll.results, options: poll.options, voted: poll.voted};\n\n    const newChart = {\n                        series: [{\n                            data: selected.results\n                          }],\n                          options: {\n                            chart: {\n                              height: 350,\n                              type: 'bar',\n                              events: {\n                                click: function(chart, w, e) {\n                                  // console.log(chart, w, e)\n                                }\n                              }\n                            },\n                            plotOptions: {\n                              bar: {\n                                columnWidth: '45%',\n                                distributed: true,\n                              }\n                            },\n                            dataLabels: {\n                              enabled: false\n                            },\n                            legend: {\n                              show: false\n                            },\n                            xaxis: {\n                              categories: selected.options,\n                              labels: {\n                                style: {\n                                  fontSize: '12px'\n                                }\n                              }\n                            }\n                          },\n                    }\n\n    \n    setPollSelected(selected);\n    setChartCon(newChart);\n    \n  }\n\n\n  const handleVote = (e) => {\n\n    e.preventDefault();\n    [].forEach.call(e.target.elements, function(ele) {\n        if (ele.checked) {\n          const index = polls.findIndex(poll => {\n            return poll.id === pollSelected.id;\n          });\n          polls[index].results[ele.value] += 1;\n          polls[index].voted = true;\n          pollSelected.voted = true;\n          setPollSelected(pollSelected);\n          setPolls(polls);\n\n          localStorage.setItem('pollsList', JSON.stringify(polls));\n\n        }\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <Head \n        newPoll={newPoll}\n        setNewPoll={setNewPoll}\n        handleSubmit={handleSubmit}\n      />\n      <Content \n        polls={polls}\n        setPolls={setPolls}\n        handleSelectPoll={handleSelectPoll}\n        pollSelected={pollSelected}\n        handleVote={handleVote}\n        chartCon={chartCon}\n        setChartCon={setChartCon}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}